from flask import Flask, request, redirect, render_template
import sqlite3
import string
import random

app = Flask(__name__)

# Function to create the database and table if not exists
def init_db():
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    c.execute('''
        CREATE TABLE IF NOT EXISTS urls (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            long_url TEXT NOT NULL,
            short_code TEXT NOT NULL UNIQUE
        )
    ''')
    conn.commit()
    conn.close()

# Function to generate random 6-character slug
def generate_short_code(length=6):
    characters = string.ascii_letters + string.digits
    return ''.join(random.choices(characters, k=length))

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        long_url = request.form['long_url']

        short_code = generate_short_code()
        
        conn = sqlite3.connect('database.db')
        c = conn.cursor()
        # Ensure uniqueness of short_code
        while True:
            c.execute("SELECT * FROM urls WHERE short_code = ?", (short_code,))
            if c.fetchone():
                short_code = generate_short_code()
            else:
                break

        c.execute("INSERT INTO urls (long_url, short_code) VALUES (?, ?)", (long_url, short_code))
        conn.commit()
        conn.close()

        fake_domain = "https://google.com/"
        display_url = fake_domain + short_code  # what user sees
        real_url = request.host_url + short_code  # actual clickable link

        # Pass both to the template
        return render_template('index.html', short_url=real_url, display_url=display_url)

    return render_template('index.html', short_url=None, display_url=None)

@app.route('/<short_code>')
def redirect_to_long_url(short_code):
    conn = sqlite3.connect('database.db')
    c = conn.cursor()
    c.execute("SELECT long_url FROM urls WHERE short_code = ?", (short_code,))
    result = c.fetchone()
    conn.close()
    if result:
        return redirect(result[0])
    else:
        return "Invalid URL", 404

if __name__ == '__main__':
    init_db()
    app.run(debug=True)
